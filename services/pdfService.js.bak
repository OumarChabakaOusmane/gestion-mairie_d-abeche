const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const { logger } = require('../config/logger');

// Dossier de sortie pour les PDF générés
const OUTPUT_DIR = path.join(__dirname, '../public/pdfs');

// Créer le dossier de sortie s'il n'existe pas
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

/**
 * Génère un PDF pour un acte de divorce
 * @param {Object} data - Les données de l'acte de divorce
 * @returns {Promise<Buffer>} - Le buffer du PDF généré
 */
const generateDivorcePdf = async (data) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50, bufferPages: true });
      const buffers = [];
      
      // Collecter les chunks de données
      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => {
        const pdfData = Buffer.concat(buffers);
        resolve(pdfData);
      });

      // En-tête du document
      generateHeader(doc);
      
      // Titre du document
      doc
        .fontSize(16)
        .font('Helvetica-Bold')
        .text('ACTE DE DIVORCE', { align: 'center', underline: true })
        .moveDown(2);
      
      // Informations de l'acte
      doc
        .fontSize(12)
        .font('Helvetica')
        .text(`Numéro d'acte: ${data.numeroActe}`, { align: 'left' })
        .text(`Date d'établissement: ${new Date(data.dateEtablissement).toLocaleDateString('fr-FR')}`, { align: 'left' })
        .text(`Lieu d'établissement: ${data.lieuEtablissement}`, { align: 'left' })
        .moveDown();
      
      // Informations sur le mariage
      doc
        .font('Helvetica-Bold')
        .text('INFORMATIONS SUR LE MARIAGE', { underline: true })
        .moveDown(0.5);
      
      doc
        .font('Helvetica')
        .text(`Date du mariage: ${new Date(data.dateMariage).toLocaleDateString('fr-FR')}`)
        .text(`Lieu du mariage: ${data.lieuMariage}`)
        .text(`Régime matrimonial: ${data.regimeMatrimonial}`)
        .moveDown();
      
      // Informations sur l'époux
      generatePersonneSection(doc, 'ÉPOUX', data.epoux);
      
      // Informations sur l'épouse
      generatePersonneSection(doc, 'ÉPOUSE', data.epouse);
      
      // Informations sur le divorce
      doc
        .addPage()
        .font('Helvetica-Bold')
        .fontSize(14)
        .text('INFORMATIONS SUR LE DIVORCE', { align: 'center', underline: true })
        .moveDown();
      
      doc
        .font('Helvetica')
        .fontSize(12)
        .text(`Date du divorce: ${new Date(data.dateDivorce).toLocaleDateString('fr-FR')}`)
        .text(`Type de divorce: ${data.typeDivorce}`)
        .text(`Motifs: ${data.motifs}`)
        .moveDown();
      
      // Garde des enfants
      if (data.gardeEnfants && data.gardeEnfants.length > 0) {
        doc
          .font('Helvetica-Bold')
          .text('GARDE DES ENFANTS', { underline: true })
          .moveDown(0.5);
        
        data.gardeEnfants.forEach((enfant, index) => {
          doc
            .font('Helvetica')
            .text(`${index + 1}. ${enfant.prenom} ${enfant.nom}`)
            .text(`   Né(e) le: ${new Date(enfant.dateNaissance).toLocaleDateString('fr-FR')}`)
            .text(`   Garde: ${enfant.garde}`)
            .moveDown(0.5);
        });
      }
      
      // Signature
      doc
        .moveTo(50, doc.y + 20)
        .lineTo(550, doc.y + 20)
        .stroke()
        .fontSize(10)
        .text('Signature et cachet de l\'officier d\'état civil', 50, doc.y + 30);
      
      doc.end();
    } catch (error) {
      logger.error('Erreur lors de la génération du PDF de divorce', { error: error.message });
      reject(error);
    }
  });
};

/**
 * Génère un PDF pour un engagement de concubinage
 * @param {Object} data - Les données de l'engagement de concubinage
 * @returns {Promise<Buffer>} - Le buffer du PDF généré
 */
const generateEngagementConcubinagePdf = async (data) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50, bufferPages: true });
      const buffers = [];
      
      // Collecter les chunks de données
      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => {
        const pdfData = Buffer.concat(buffers);
        resolve(pdfData);
      });

      // En-tête du document
      generateHeader(doc);
      
      // Titre du document
      doc
        .fontSize(16)
        .font('Helvetica-Bold')
        .text('DECLARATION DE CONCUBINAGE', { align: 'center', underline: true })
        .moveDown(2);
      
      // Informations de l'acte
      doc
        .fontSize(12)
        .font('Helvetica')
        .text(`Numéro d'acte: ${data.numeroActe}`, { align: 'left' })
        .text(`Date d'établissement: ${new Date(data.dateEtablissement).toLocaleDateString('fr-FR')}`, { align: 'left' })
        .text(`Lieu d'établissement: ${data.lieuEtablissement}`, { align: 'left' })
        .moveDown();
      
      // Informations sur le concubinage
      doc
        .font('Helvetica-Bold')
        .text('INFORMATIONS SUR LE CONCUBINAGE', { underline: true })
        .moveDown(0.5);
      
      doc
        .font('Helvetica')
        .text(`Date de début du concubinage: ${new Date(data.dateDebutConcubinage).toLocaleDateString('fr-FR')}`)
        .text(`Adresse commune: ${data.adresseCommune}`)
        .text(`Régime des biens: ${data.regimeBiens}`);
      
      if (data.detailsRegimeBiens) {
        doc.text(`Détails du régime des biens: ${data.detailsRegimeBiens}`);
      }
      
      doc.moveDown();
      
      // Informations sur le premier concubin
      generatePersonneSection(doc, 'PREMIER CONJOINT', data.concubin1);
      
      // Informations sur le deuxième concubin
      generatePersonneSection(doc, 'DEUXIÈME CONJOINT', data.concubin2);
      
      // Témoins
      if (data.temoins && data.temoins.length > 0) {
        doc
          .addPage()
          .font('Helvetica-Bold')
          .text('TÉMOINS', { align: 'center', underline: true })
          .moveDown(0.5);
        
        data.temoins.forEach((temoin, index) => {
          doc
            .font('Helvetica')
            .text(`Témoin ${index + 1}: ${temoin.prenoms} ${temoin.nom}`)
            .text(`   Né(e) le: ${new Date(temoin.dateNaissance).toLocaleDateString('fr-FR')}`)
            .text(`   Adresse: ${temoin.adresse}`)
            .text(`   Pièce d'identité: ${temoin.typePieceIdentite} n°${temoin.numeroPieceIdentite}`)
            .moveDown(0.5);
        });
      }
      
      // Observations
      if (data.observations) {
        doc
          .font('Helvetica-Bold')
          .text('OBSERVATIONS', { underline: true })
          .moveDown(0.5);
        
        doc
          .font('Helvetica')
          .text(data.observations, { width: 500 });
      }
      
      // Signature
      doc
        .moveTo(50, doc.y + 20)
        .lineTo(550, doc.y + 20)
        .stroke()
        .fontSize(10)
        .text('Signature et cachet de l\'officier d\'état civil', 50, doc.y + 30);
      
      doc.end();
    } catch (error) {
      logger.error('Erreur lors de la génération du PDF d\'engagement de concubinage', { error: error.message });
      reject(error);
    }
  });
};

/**
 * Génère l'en-tête du document avec le drapeau du Tchad
 * @param {PDFDocument} doc - L'instance PDFKit
 */
function generateHeader(doc) {
  // Drapeau du Tchad
  const flagHeight = 30;
  const flagWidth = 45;
  const x = 50;
  const y = 50;

  // Contour noir
  doc
    .lineWidth(1)
    .strokeColor('#000000')
    .rect(x, y, flagWidth, flagHeight)
    .stroke();

  // Bleu
  doc
    .fill('#002689')
    .rect(x, y, flagWidth / 3, flagHeight)
    .fill();
  
  // Jaune
  doc
    .fill('#FFD100')
    .rect(x + flagWidth / 3, y, flagWidth / 3, flagHeight)
    .fill();
  
  // Rouge
  doc
    .fill('#CE1126')
    .rect(x + (2 * flagWidth / 3), y, flagWidth / 3, flagHeight)
    .fill();

  // Texte de l'en-tête
  doc
    .fontSize(10)
    .fill('#333333')
    .text('RÉPUBLIQUE DU TCHAD', 110, y + 5, { width: 400, align: 'center' })
    .font('Helvetica-Bold')
    .fontSize(12)
    .text('Unité - Travail - Progrès', 110, y + 20, { width: 400, align: 'center' })
    .moveDown(3);
}

/**
 * Génère une section pour une personne (époux, épouse, concubin)
 * @param {PDFDocument} doc - L'instance PDFKit
 * @param {string} title - Le titre de la section
 * @param {Object} personne - Les informations de la personne
 */
const generatePersonneSection = (doc, title, personne) => {
  doc
    .addPage()
    .font('Helvetica-Bold')
    .fontSize(14)
    .text(title, { align: 'center', underline: true })
    .moveDown(0.5);
  
  doc
    .font('Helvetica')
    .fontSize(12)
    .text(`Nom: ${personne.nom}`)
    .text(`Prénoms: ${personne.prenoms}`)
    .text(`Date de naissance: ${new Date(personne.dateNaissance).toLocaleDateString('fr-FR')}`)
    .text(`Lieu de naissance: ${personne.lieuNaissance}`)
    .text(`Nationalité: ${personne.nationalite}`)
    .text(`Profession: ${personne.profession || 'Non renseignée'}`)
    .text(`Adresse: ${personne.adresse}`)
    .text(`Type de pièce d'identité: ${personne.typePieceIdentite}`)
    .text(`Numéro de pièce: ${personne.numeroPieceIdentite}`)
    .text(`Situation matrimoniale: ${personne.situationMatrimoniale}`);
  
  if (personne.situationMatrimoniale === 'marié(e)' && personne.nomConjoint) {
    doc.text(`Nom du conjoint: ${personne.nomConjoint}`);
    
    if (personne.dateMariage) {
      doc.text(`Date de mariage: ${new Date(personne.dateMariage).toLocaleDateString('fr-FR')}`);
    }
  }
  
  doc.moveDown();
};

/**
 * Fonction principale pour générer un PDF en fonction du type
 * @param {string} type - Le type de document ('divorce' ou 'engagement-concubinage')
 * @param {Object} data - Les données du document
 * @returns {Promise<Buffer>} - Le buffer du PDF généré
 */
const generatePdf = async (type, data) => {
  try {
    switch (type) {
      case 'divorce':
        return await generateDivorcePdf(data);
      case 'engagement-concubinage':
        return await generateEngagementConcubinagePdf(data);
      case 'naissance':
        return await generateNaissancePdf(data);
      default:
        throw new Error(`Type de document non pris en charge: ${type}`);
    }
  } catch (error) {
    logger.error('Erreur lors de la génération du PDF', { 
      type, 
      error: error.message,
      stack: error.stack 
    });
    throw error;
  }
};

/**
 * Génère un PDF pour un acte de naissance
 * @param {Object} data - Les données de l'acte de naissance
 * @returns {Promise<Buffer>} - Le buffer du PDF généré
 */
const generateNaissancePdf = async (data) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ 
        margin: 50,
        bufferPages: true,
        size: 'A4'
      });
      
      const buffers = [];
      doc.on('data', buffers.push.bind(buffers));
      doc.on('error', (error) => {
        logger.error('Erreur lors de la génération du PDF', { error });
        reject(error);
      });
      doc.on('end', () => resolve(Buffer.concat(buffers)));

      // 1. En-tête avec drapeau
      generateHeader(doc);
      
      // 2. Titre du document
      doc
        .fontSize(18)
        .font('Helvetica-Bold')
        .text('ACTE DE NAISSANCE', { align: 'center' })
        .moveDown(0.5);
        
      // 3. Informations administratives
      doc
        .fontSize(10)
        .font('Helvetica')
        .text(`N° ${data.numeroActe || 'N/A'}`, { align: 'right' })
        .text(`Mairie de ${data.mairie || 'N/A'}`, { align: 'right' })
        .text(`Fait le: ${data.dateEtablissement ? new Date(data.dateEtablissement).toLocaleDateString('fr-FR') : 'N/A'}`, { align: 'right' })
        .moveDown(1);
        
      // 4. Informations de l'enfant
      doc
        .fontSize(12)
        .font('Helvetica-Bold')
        .text('INFORMATIONS DE L\'ENFANT', { underline: true })
        .moveDown(0.3);
        
      doc
        .font('Helvetica')
        .fontSize(11)
        .text(`Nom: ${data.nomEnfant || 'N/A'}`)
        .text(`Prénoms: ${data.prenomsEnfant || 'N/A'}`)
        .text(`Date de naissance: ${data.dateNaissance ? new Date(data.dateNaissance).toLocaleDateString('fr-FR') : 'N/A'}`)
        .text(`Heure de naissance: ${data.heureNaissance || 'N/A'}`)
        .text(`Lieu de naissance: ${data.lieuNaissance || 'N/A'}`)
        .text(`Sexe: ${data.sexe === 'M' ? 'Masculin' : data.sexe === 'F' ? 'Féminin' : 'N/A'}`)
        .moveDown(1);
        
      // 5. Informations des parents
      doc
        .font('Helvetica-Bold')
        .fontSize(12)
        .text('INFORMATIONS DES PARENTS', { underline: true })
        .moveDown(0.3);
        
      // Père
      doc
        .font('Helvetica-Bold')
        .text('Père:')
        .font('Helvetica')
        .text(`Nom: ${data.nomPere || 'N/A'}`)
        .text(`Prénoms: ${data.prenomsPere || 'N/A'}`);
        
      if (data.dateNaissancePere) {
        doc.text(`Date de naissance: ${new Date(data.dateNaissancePere).toLocaleDateString('fr-FR')}`);
      }
      if (data.lieuNaissancePere) {
        doc.text(`Lieu de naissance: ${data.lieuNaissancePere}`);
      }
      if (data.professionPere) {
        doc.text(`Profession: ${data.professionPere}`);
      }
      
      doc.moveDown(0.5);
      
      // Mère
      doc
        .font('Helvetica-Bold')
        .text('Mère:')
        .font('Helvetica')
        .text(`Nom: ${data.nomMere || 'N/A'}`)
        .text(`Prénoms: ${data.prenomsMere || 'N/A'}`);
        
      if (data.dateNaissanceMere) {
        doc.text(`Date de naissance: ${new Date(data.dateNaissanceMere).toLocaleDateString('fr-FR')}`);
      }
      if (data.lieuNaissanceMere) {
        doc.text(`Lieu de naissance: ${data.lieuNaissanceMere}`);
      }
      if (data.professionMere) {
        doc.text(`Profession: ${data.professionMere}`);
      }
      
      doc.moveDown(1);
      
      // 6. Informations du déclarant
      if (data.nomDeclarant || data.prenomsDeclarant) {
        doc
          .font('Helvetica-Bold')
          .fontSize(12)
          .text('INFORMATIONS DU DÉCLARANT', { underline: true })
          .moveDown(0.3)
          .font('Helvetica')
          .text(`Nom: ${data.nomDeclarant || 'N/A'}`)
          .text(`Prénoms: ${data.prenomsDeclarant || 'N/A'}`);
          
        if (data.lienDeclarant) {
          doc.text(`Lien avec l'enfant: ${data.lienDeclarant}`);
        }
        if (data.adresseDeclarant) {
          doc.text(`Adresse: ${data.adresseDeclarant}`);
        }
        
        doc.moveDown(1);
      }
      
      // 7. Observations
      if (data.observations) {
        doc
          .font('Helvetica-Bold')
          .fontSize(12)
          .text('OBSERVATIONS', { underline: true })
          .moveDown(0.3)
          .font('Helvetica')
          .text(data.observations, { align: 'justify' })
          .moveDown(1);
      }
      
      // 8. Signature
      doc
        .moveDown(2)
        .text('Fait à ' + (data.mairie || 'N/A') + ', le ' + (data.dateEtablissement ? new Date(data.dateEtablissement).toLocaleDateString('fr-FR') : ''), { align: 'right' })
        .moveDown(3)
        .text('Le Maire', { align: 'right' })
        .moveDown(2)
        .text('Cachet et signature', { align: 'right', color: '#999' });
      
      // Finaliser le document
      doc.end();
    } catch (error) {
      logger.error('Erreur lors de la génération du PDF de naissance', { error });
      reject(error);
    }
  });
}
        .moveDown(0.5);

      doc
        .fillColor('#333333')
        .font('Helvetica')
        .fontSize(12)
        .text(`Nom: ${data.enfant.nom || 'Non spécifié'}`)
        .text(`Prénom(s): ${data.enfant.prenom || 'Non spécifié'}`)
        .text(`Date de naissance: ${new Date(data.enfant.dateNaissance).toLocaleDateString('fr-FR')}`)
        .text(`Heure de naissance: ${data.enfant.heureNaissance || 'Non spécifiée'}`)
        .text(`Lieu de naissance: ${data.enfant.lieuNaissance || 'Non spécifié'}`)
        .text(`Sexe: ${data.enfant.sexe === 'M' ? 'Masculin' : 'Féminin'}`)
        .moveDown(1);

      // 5. Filiation
      doc
        .fillColor('#CE1126') // Rouge du Tchad
        .font('Helvetica-Bold')
        .fontSize(14)
        .text('FILIATION', { underline: true })
        .moveDown(0.5);

      // Père
      doc
        .fillColor('#333333')
        .font('Helvetica-Bold')
        .fontSize(12)
        .text('PÈRE:')
        .font('Helvetica')
        .text(`Nom et prénoms: ${data.pere.nom || 'Non spécifié'} ${data.pere.prenom || ''}`)
        .text(`Date de naissance: ${data.pere.dateNaissance ? new Date(data.pere.dateNaissance).toLocaleDateString('fr-FR') : 'Non spécifiée'}`)
        .text(`Lieu de naissance: ${data.pere.lieuNaissance || 'Non spécifié'}`)
        .text(`Profession: ${data.pere.profession || 'Non spécifiée'}`)
        .moveDown(1);

      // Mère
      doc
        .font('Helvetica-Bold')
        .text('MÈRE:')
        .font('Helvetica')
        .text(`Nom et prénoms: ${data.mere.nom || 'Non spécifié'} ${data.mere.prenom || ''}`)
        .text(`Date de naissance: ${data.mere.dateNaissance ? new Date(data.mere.dateNaissance).toLocaleDateString('fr-FR') : 'Non spécifiée'}`)
        .text(`Lieu de naissance: ${data.mere.lieuNaissance || 'Non spécifié'}`)
        .text(`Profession: ${data.mere.profession || 'Non spécifiée'}`)
        .moveDown(2);

      // 6. Déclarant
      if (data.declarant) {
        doc
          .fillColor('#002689')
          .font('Helvetica-Bold')
          .fontSize(14)
          .text('DÉCLARATION', { underline: true })
          .moveDown(0.5);
        
        doc
          .fillColor('#333333')
          .font('Helvetica')
          .fontSize(12)
          .text(`Déclarant: ${data.declarant.prenom || ''} ${data.declarant.nom || 'Non spécifié'}`)
          .text(`Lien avec l'enfant: ${data.declarant.lien || 'Non spécifié'}`)
          .text(`Adresse: ${data.declarant.adresse || 'Non spécifiée'}`)
          .moveDown(1);
      }

      // 7. Observations
      if (data.observations) {
        doc
          .fillColor('#CE1126')
          .font('Helvetica-Bold')
          .fontSize(12)
          .text('OBSERVATIONS', { underline: true })
          .moveDown(0.5);
        
        doc
          .fillColor('#333333')
          .font('Helvetica')
          .fontSize(11)
          .text(data.observations, { align: 'justify' })
          .moveDown(2);
      }

      // 8. Signature
      doc
        .moveTo(50, doc.y)
        .lineTo(550, doc.y)
        .stroke('#CCCCCC')
        .moveDown(2)
        .font('Helvetica-Italic')
        .fontSize(10)
        .text('Fait à ' + (data.mairie || 'Abéché') + ', le ' + new Date().toLocaleDateString('fr-FR'), { align: 'right' })
        .moveDown(3)
        .font('Helvetica-Bold')
        .text('L\'Officier d\'État Civil', { align: 'right' })
        .moveDown(0.5)
        .font('Helvetica')
        .text('(Signature et cachet)', { align: 'right' });

      doc.end();
    } catch (error) {
      logger.error('Erreur lors de la génération du PDF de naissance', { error });
      reject(error);
    }
  });
};

module.exports = {
  generatePdf,
  generateDivorcePdf,
  generateEngagementConcubinagePdf,
  generateNaissancePdf,
  generateHeader,
  generatePersonneSection
};
